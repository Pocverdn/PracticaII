import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) throws IOException {

        Path path = Path.of("src", "main", "resources", "sales_data.csv"); //Dirección url dentro de la maquina del archivo csv

        Scanner scanner = new Scanner(System.in);

        //Extracción de todos las compras en New York
        List<POJO> newYork = Files.lines(path)//Función para leer el csv linea por linea
                .skip(1)//Salta la primera linea (Linea con los nombres de las variables)
                .map(Main::getPojo) // Metodo de la misma clase (Ver linea #149)
                .filter(nao -> "NYC".equals(nao.getCity())) //Metodo con un lambda de compardor de textos
                .toList(); //Agrega a la lista de objetos POJO "newYork"

        List<POJO> classicCars = Files.lines(path)
                .skip(1)
                .map(Main::getPojo)
                .filter(nao -> "NYC".equals(nao.getCity()) && "Classic Cars".equals(nao.getProduct_line())) //Mismo proceso, pero con mas condicionales
                .toList();

        List<POJO> motorcycles = Files.lines(path)
                .skip(1)
                .map(Main::getPojo)
                .filter(nao -> "NYC".equals(nao.getCity()) && "Motorcycles".equals(nao.getProduct_line())) //Mismo proceso, pero con mas condicionales
                .toList();

        Map<String, Integer> bestNewYorkCostumer = Files.lines(path)//Colección de llaves valor (Diccionarios)
                .skip(1)
                .map(Main::getPojo)
                .filter(nao -> "NYC".equals(nao.getCity()) && ("Classic Cars".equals(nao.getProduct_line()) || "Vintage Cars".equals(nao.getProduct_line()))) //Filtra por todos los que sean de New York y el producto sea un auto
                .collect(Collectors.groupingBy(POJO::getCustomer_name, Collectors.summingInt(POJO::getQuantity))); //Agrupa y alamacena todas la lineas con mismo nombre, y suma la cantidad de ordenes

        Map.Entry<String, Integer> maxNewYorkCostumer = Collections.max(bestNewYorkCostumer.entrySet(), //Busca el valor mas alto entre bestNewYorkCostumer y guarda su llave y valor
                Map.Entry.comparingByValue());

        Map<String, Integer> Costumer = Files.lines(path)
                .skip(1)
                .map(Main::getPojo)
                .collect(Collectors.groupingBy(POJO::getCustomer_name, Collectors.summingInt(POJO::getQuantity)));

        Map.Entry<String, Integer> maxCostumer = Collections.max(Costumer.entrySet(),
                Map.Entry.comparingByValue()); //Compara el valor de cada llave, para encontrar el maximo

        Map.Entry<String, Integer> worstCostumer = Collections.min(Costumer.entrySet(), //Busca el valor mas pequeño entre Costumer
                Map.Entry.comparingByValue());
        
        while (true) {
            
            System.out.println("1. List of New York sales");
            System.out.println("2. Amount generated in New York");
            System.out.println("3. Classic Cars sold in New York");
            System.out.println("4. Amount generated by Classic Cars in New York");
            System.out.println("5. Motorcycles sold in New York");
            System.out.println("6. Amount generated by Motorcycles in New York");
            System.out.println("7. Best New York costumer");
            System.out.println("8. Best file costumer");
            System.out.println("9. Worst file costumer");
            System.out.println("10. Leave Menu...");
            
            System.out.print("Choose an option: ");
            int option = scanner.nextInt();
            scanner.nextLine();
            System.out.println();
            
            switch (option){

                case 1:
                    
                    newYork.forEach(System.out::println);
                    int totalNewYork = newYork.size();
                    System.out.println("Times New York appears in the document: " + totalNewYork + "\n");
                    System.out.print("Press any key to continue");
                    scanner.nextLine();
                    break;
                    
                case 2:

                    double totalSales = newYork.stream().mapToDouble(POJO::getSales).sum();
                    System.out.println("Total amount generated in New York: $" + totalSales + " dollars" + "\n");
                    System.out.print("Press any key to continue");
                    scanner.nextLine();
                    break;
                    
                case 3:

                    int totalClassics = classicCars.size();
                    System.out.println("Classic Cars sold in New York: " + totalClassics + "\n");
                    System.out.print("Press any key to continue");
                    scanner.nextLine();
                    break;
                    
                case 4:

                    double totalClassicAmount = classicCars.stream().mapToDouble(POJO::getSales).sum();
                    System.out.println("Total amount generated by Classic Cars in New York: $" + totalClassicAmount + " dollars" + "\n");
                    System.out.print("Press any key to continue");
                    scanner.nextLine();
                    break;
                    
                case 5:

                    int totalMotorcycles = motorcycles.size();
                    System.out.println("Motorcycles sold in New York: " + totalMotorcycles + "\n");
                    System.out.print("Press any key to continue");
                    scanner.nextLine();
                    break;
                    
                case 6:

                    double totalMotorcyclesAmount = motorcycles.stream().mapToDouble(POJO::getSales).sum();
                    System.out.println("Total amount generated by Motorcycles in New York: $" + totalMotorcyclesAmount + " dollars" + "\n");
                    System.out.print("Press any key to continue");
                    scanner.nextLine();
                    break;
                    
                case 7:

                    System.out.println("Best New York costumer -> '" + maxNewYorkCostumer.getKey() + "' with " + maxNewYorkCostumer.getValue() + " products" + "\n");
                    System.out.print("Press any key to continue");
                    scanner.nextLine();
                    break;
            
                case 8:

                    System.out.println("Best file costumer -> '" + maxCostumer.getKey() + "' with " + maxCostumer.getValue() + " products" + "\n");
                    System.out.print("Press any key to continue");
                    scanner.nextLine();
                    break;
                    
                case 9:

                    System.out.println("Worst file costumer -> '" + worstCostumer.getKey() + "' with " + worstCostumer.getValue() + " products" + "\n");
                    System.out.print("Press any key to continue");
                    scanner.nextLine();
                    break;
                    
                case 10:

                    System.out.println("Leaving Menu...");
                    scanner.close();
                    System.exit(0);
                    
                default:
                    
                    System.out.println("Invalid option" + "\n");
                    System.out.print("Press any key to continue");
                    scanner.nextLine();
                    break;

            }
        }
    }
    private static POJO getPojo(String line){
        String[] fields = line.split(",");

        //Llamada al contructor de POJO
        return new POJO(fields[0], Integer.parseInt(fields[1]), Double.parseDouble(fields[2]), Integer.parseInt(fields[3]), Double.parseDouble(fields[4]), fields[5],
                fields[6], Integer.parseInt(fields[7]), Integer.parseInt(fields[8]), Integer.parseInt(fields[9]), fields[10], Integer.parseInt(fields[11]), fields[12],
                fields[13], fields[14], fields[15], fields[16], fields[17], fields[18], fields[19], fields[20], fields[21], fields[22], fields[23], fields[24]);
    }
}